var eventsdb = require ('../db/events');
var usersdb = require('../db/users');
var appsdb = require('../db/apps');
var lecturesdb = require('../db/lectures');
var sys = require('sys');
var exec = require('child_process').exec;
var child;
var fs = require('fs');
var QRCode = require('qrcode');
var unzip = require('unzip');
var parseXlsx = require('excel');
//var fstream = require('fstream');

exports.settings = function(req, res) {
	if (req.params.id) {
		if (req.session.role == "admin") {
			eventsdb.geteventbyname(req.params.id, function(evento) {
				if (evento == null)
					console.log("error getting user");
				else {
					res.method = 'GET';
					appsdb.getapp(req.params.id, function(app) {
						if (app == null) {
							console.log("error getting app");
							res.send(500);
						} else {
							res.render('newapp', { title :'App settings', eventname: evento[0].fullname, appid: req.params.id, user: req.session.user, appli: app[0] });
						}
					});
				}
			});
		} else if (req.session.role == "user") {
			eventsdb.geteventname(req.session.user, req.params.id, function(evento) {
				if (evento == null)
					console.log("error getting user");
				else {
					res.method = 'GET';
					appsdb.getapp(req.params.id, function(app) {
						if (app == null) {
							console.log("error getting app");
							res.send(500);
						} else {
							res.render('newapp', {title : 'App settings' , eventname: evento[0].fullname, appid: req.params.id, user: req.session.user, appli: app[0] });
						}
					});
				}
			});
		}
	} else {
		res.redirect('back');
	}
}

exports.build = function(req, res) {
	if (req.params.id) {
		fs.open("./gen/" + req.params.id  +"/assets/events.html", "w+", function (err) {
			if (err) {
				res.send(500);
				console.log(err);
			} else {
  				console.log('File opened correctly');
  			}
		});
		//events html file generated by the events
		lecturesdb.getall(req.params.id, function (lect) {
			var htmlFile = '<script type="text/javascript">\n\t$(".clickme").click( function () {\n\t\tvar $hidden = $("#hidden" + this.id.substr(7));\n\t\t$hidden.css({ "display": "block" });\n\t});\n\n\t$(".hidden").click( function () {\n\t\tvar $hidden = $("#hidden" + this.id.substr(6));\n\t\t$hidden.css({ "display": "none" });\n\t});\n</script>\n\n';
			if (lect == null) {
				res.send(500);
			} else {
				for (var i = 0; i < lect.length; i++) {
					var time1 = (('0' + lect[i].sdate.getHours()).slice(-2)) + ":" + (('0' + lect[i].sdate.getMinutes()).slice(-2));
					var time2 = (('0' + lect[i].edate.getHours()).slice(-2)) + ":" + (('0' + lect[i].edate.getMinutes()).slice(-2));
					htmlFile += '<div class="event">\n\t<div id="clickme'+ i + '" class="clickme">\n\t\t<img src="./img/calendar.png" />' + lect[i].lecttitle + '\n\t</div>\n\t<div id="hidden' + i + '" class="hidden">\n\t\t<sub class="subscript"><img src="./img/user.png" /> ' + lect[i].lecturer + ' <br/><img src="./img/time.png" />' + time1 + '-' + time2 + '</sub>\n\t</div>\n</div>';
				}
				htmlFile +="\n<br/><br/><br/><br/><br/><br/><br/>";
				fs.writeFile("./gen/" + req.params.id + "/assets/events.html", htmlFile, function (err) {
					if (err) {
						res.send(500);
						console.log(err);
					} else {
  						console.log('It\'s saved!');
  					}
				});		
			}
		});
		appsdb.getapp(req.params.id, function(app) {
			if (app == null) {
				console.log("error getting app");
				res.send(500);
			} else {
				settings = app[0];  //twitter, facebook, evernote, etc
				settings.appname = settings.appname.replace(/\s/g, "");
				// executes the script used for generating the actual mobile app
				child = exec("sh ./script.sh " + settings.ename + " " + settings.appname + " a", function (error, stdout, stderr) {
  					sys.print('Output: ' + stdout);
  					if (error !== null) {
	    				console.log('exec error: ' + error);
  					} else {
  						console.log("App has been generated, check errors"); //if something bad happens at least by now
						res.redirect('/event/' + req.params.id);
  					}
				});
			}
		});
	} else {
		res.redirect('back');
	}
}

exports.download = function(req, res) {
	if (req.params.id) {
		var path = "./gen/" + req.params.id + "appname.apk";
		fs.exists(path, function (exists) {
  			if (!exists) {
  				console.log("App hasn't been generated yet");
  				res.send(403);
			} else {
  				eventsdb.geteventbyname(req.params.id, function(evento) {
					if (evento == null) {
						console.log("error getting user");
						res.send(500);
					} else {
						res.method = 'GET';
						QRCode.draw(path, "max", function (error, canvas) {
							if (error) {
								console.log(error);
								res.send(500);
							} else {
								res.render('download', { title: "Download app", eventname: evento[0].fullname, image: canvas, url: path, user: req.session.user });
							}
						});
					}
				});
  			}
		});
	} else {
		res.redirect('back');
	}
}

/*
 * POST
 */
 exports.save = function(req, res) {
 	if (req.files.logo.name) {
 		var logozip = './gen/' + req.body.appid;
 		var logopath = "./gen/" + req.body.appid + "/" + req.files.logo.name;
 		fs.exists(logopath, function (exists) {
 			if (!exists) {
 				fs.open(logopath, "w+", function (err) {
					if (err) {
						res.send(500);
						console.log(err);
					} else {
		  				console.log('File opened correctly');
  					}
				});
			} else {
				console.log("File already exists");
			}
		});
		fs.readFile(req.files.logo.path, function (err, data) {
	  		fs.writeFile(logopath, data, function (err) {
		  		console.log("Writing file " + logopath);
  				if (err) 
	  				console.log(err);
  			});
  			fs.createReadStream(logopath).pipe(unzip.Extract({ path: logozip }));
		});		
		console.log(req.files.logo.name + " saved successfully");
 	}
 	if (req.files.splash.name) {
		var splashzip = "./gen/" + req.body.appid;
		var splashpath = "./gen/" + req.body.appid + "/" + req.files.splash.name;
		fs.exists(splashpath, function (exists) {
 			if (!exists) {
 				fs.open(splashpath, "w+", function (err) {
					if (err) {
						res.send(500);
						console.log(err);
					} else {
		  				console.log('File opened correctly');
  					}
				});
			} else {
				console.log("File already exists");
			}
		});
		fs.readFile(req.files.splash.path, function (err, data) {
  			fs.writeFile(splashpath, data, function (err) {
  				console.log("Writing file " + splashpath);
  				if (err) 
  					console.log("Couldn't save " + splashpath + " " + err);
	  		});
	  		fs.createReadStream(splashpath).pipe(unzip.Extract({ path: splashzip }));
		});
		console.log(req.files.splash.name + " saved successfully");
	}
 	if (req.files.css.name) {
 		var csspath = "./gen/" + req.body.appid + "/" + req.files.css.name;
 		fs.exists(csspath, function (exists) {
 			if (!exists) {
 				fs.open(csspath, "w+", function (err) {
					if (err) {
						res.send(500);
						console.log(err);
					} else {
		  				console.log('File opened correctly');
  					}
				});
			} else {
				console.log("File already exists");
			}
		});
		fs.readFile(req.files.css.path, function (err, data) {
  			fs.writeFile(csspath, data, function (err) {
	  			console.log("Writing file " + csspath);
  				if (err) 
	  				console.log(err);
  			});
		});
		console.log(req.files.css.name + " saved successfully");
	}
	if (req.files.xlsx.name) {
 		var xlsx = "./gen/" + req.body.appid + "/" + req.files.xlsx.name;
 		fs.exists(xlsx, function (exists) {
 			if (!exists) {
 				fs.open(xlsx, "w+", function (err) {
					if (err) {
						res.send(500);
						console.log(err);
					} else {
		  				console.log('File opened correctly');
  					}
				});
			} else {
				console.log("File already exists");
			}
		});
		fs.readFile(req.files.xlsx.path, function (err, data) {
	  		fs.writeFile(xlsx, data, function (err) {
		  		console.log("Writing file " + xlsx);
  				if (err) 
	  				console.log(err);
  			});
		});	
		parseXlsx(xlsx, function (data) {
  			console.log("Parsing file " + xlsx);
  			if (data == null) {
  				console.log("No data found");
  			} else {
    			for (var i = 1; i < data.length; i++) {
    				lecturesdb.add(req.params.appid, data[i][0], data[i][1], data[i][2] + " " data[i][3], data[i][4] + " " data[i][5], data[i][6], data[i][7], data[i][8], function (lect) {
    					if (lect = null) {
    						console.log("lecture added successfully");
    					} else {
    						console.log("There has been an error");
    						break;
    					}
    				});
    			}
    			console.log("Success!");
    		}
		});
	}
	var twit = req.body.twit == undefined ? false : true;
	var fb = req.body.fb == undefined ? false : true;
	var evern = req.body.evern == undefined ? false : true;
	var ios = req.body.ios == undefined ? false : true;
	var andr = req.body.andr == undefined ? false : true;
	appsdb.update(req.body.id, req.body.descr, twit, fb, ios, andr, evern, req.body.appid, req.body.appid, function (appl) {
		if (appl == null) {
			res.redirect('/event/' + req.body.appid);
		} else {
			console.log("error saving application settings");
			res.redirect('back');
		}
	});
 }
